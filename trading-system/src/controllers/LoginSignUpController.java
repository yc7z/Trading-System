package controllers;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import accounts.Authenticator;
import accounts.UserAccount;
import accounts.UserManager;
import database.DataInserter;
import database.DataReader;

/**
 *
 *
 */

public class LoginSignUpController {


	/**
	 * Gives the user permission to log by checking the userID and password provided
	 * @param userID ID entered by the user
	 * @param password Password entered by the user
	 * @return true iff login is successful
	 */
	public boolean logIn(int userID, String password) {
		boolean success = false;
		DataReader dataReader = new DataReader("");
		Authenticator authenticator = new Authenticator();
		try{
			List<Integer> userIDs = dataReader.getAllUserIDs();
			if(userIDs.size() == 0){  success = false; }
			else{
				if (userIDs.contains(userID)) {
					success = authenticator.comparePassword(dataReader.findPassword(userID), password);
				}
			}
		} catch (SQLException e) { success = false; }
		return success;
	}

	/**
	 * Login a demo user with id and password.
	 * @param userID ID entered by the user
	 * @param password Password entered by the user
	 * @return true iff login is successful
	 */
	public boolean demoAccountLogIn(int userID, String password) {
		boolean success = false;
		DataReader dataReader = new DataReader("_demo");
		Authenticator authenticator = new Authenticator();
		try{
			List<Integer> userIDs = dataReader.getAllUserIDs();
			if(userIDs.size() == 0){  success = false; }
			else{
				if (userIDs.contains(userID)) {
					success = authenticator.comparePassword(dataReader.findPassword(userID), password);
				}
			}
		} catch (SQLException e) { success = false; }
		return success;
	}

	/**
	 * returns if the user is an admin
	 * @param userID the id of the user
	 * @param password the password of the user
	 * @return boolean if the user is an admin
	 */
	public boolean isAdmin(int userID, String password){
		boolean success = false;
		DataReader dataReader = new DataReader("");
		Authenticator authenticator = new Authenticator();
		try{
			List<Integer> adminIDs = dataReader.getAllAdminIDs();
			if(adminIDs.size() == 0){  success = false; }
			else{
				if (adminIDs.contains(userID)) {
					success = authenticator.comparePassword(dataReader.findPassword(userID), password);
				}
			}
		} catch (SQLException e) { success = false; }
		return success;
	}

	/**
	 * helper method for signing up
	 * @param name name of the user
	 * @param city home city of the user
	 * @param userInformation a Map containing all the user information
	 */
	private void signUpHelper(String name, String city, Map<String, Object> userInformation) {
		userInformation.put("NAME", name);
		userInformation.put("CITY", city);
		userInformation.put("OVERBORROWED", 0);
		userInformation.put("NUM_TRADES", 0);
		userInformation.put("INCOMPLETE_TRADES", 0);
		userInformation.put("FUNDS", 0.0);
		userInformation.put("IS_ON_VACATION", 0);
		userInformation.put("IS_FROZEN", 0);
	}

	/**
	 * a helper method for demo user signing up
	 * @param password the password of the user
	 * @param name the name of the user
	 * @param city the home city of the user
	 * @param userManager UserManager
	 * @param dataWriter DataInserter
	 * @param userInformation a Map containing all the user information
	 * @return the id of the user
	 * @throws SQLException
	 */
	private int signUpDemoHelper(String password, String name, String city, UserManager userManager,
								 DataInserter dataWriter, Map<String, Object> userInformation)
			throws SQLException {

		signUpHelper(name, city, userInformation);
		Integer id = dataWriter.insertUser(password, userInformation);
		UserAccount newUser = new UserAccount(password);
		newUser.setUserID(id);
		userManager.addUser(newUser);
		return id;
	}


	/**
	 * Signs a user up in the system
	 * @param password Represents the password entered by the User
	 * @param city the city where the user lives
	 * @param name the name of the user
	 * @param userManager the UserManager object which stores all users in the system.
	 * @return The appropriate ID of the user generated by the system
	 */
	public Integer signUpUser(String password, String name, String city, UserManager userManager){
		DataInserter dataWriter = new DataInserter("");

		int userID = 0;
		Map<String, Object> userInformation = new HashMap<String, Object>();
		try {
			userID = signUpDemoHelper(password, name, city, userManager, dataWriter, userInformation);
		} catch (SQLException | NullPointerException e) { e.printStackTrace(); }
		return userID;
	}

	/**
	 * Signs a demo user up in the system
	 * @param password Represents the password entered by the User
	 * @param city the city where the user lives
	 * @param name the name of the user
	 * @param userManager the UserManager object which stores all users in the system.
	 * @return The appropriate ID of the user generated by the system
	 */
	public Integer signUpDemoUser(String password, String name, String city, UserManager userManager){
		DataInserter dataWriter = new DataInserter("_demo");

		int userID = 0;
		Map<String, Object> userInformation = new HashMap<String, Object>();
		try {
			userID = signUpDemoHelper(password, name, city, userManager, dataWriter, userInformation);
		} catch (SQLException e) { e.printStackTrace(); }
		catch (NullPointerException e){e.printStackTrace(); }
		return userID;
	}

	/**
	 * Signs a user up in the system
	 * @param password Represents the password entered by the User
	 * @return The appropriate ID of the user generated by the system
	 */
	public Integer signUpAdmin(String password){
		DataInserter dataWriter = new DataInserter("");

		int userID = 0;
		try {
			userID = dataWriter.insertAdmin(password);
		} catch (SQLException | NullPointerException e) { e.printStackTrace(); }
		return userID;
	}


}
